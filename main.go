package main

import (
	"fmt"
	"io/ioutil"
	"regexp"
)

func init() {}

const (
	curopen  = 0x7B
	curclose = 0x7D
	dquote   = 0x22
	eq       = 0x3D
	comma    = 0x2C
	colon    = 0x3A
	wspace   = 0x20
)

var stack []string

var (
	lookup = map[string]string{
		"decl":   "Type AutoGenerated ",
		"struct": "struct {\n",
	}
)

func readFile(name string) ([]byte, error) {
	data, err := ioutil.ReadFile(name)
	if err != nil {
		return []byte{}, err
	}
	return data, nil
}

func parseJSON(jsonText []byte) []byte {
	init := []byte(lookup["decl"])
	for i := 0; i < len(jsonText); i++ {
		c := jsonText[i]
		switch c {
		case curopen:
			init = append(init, []byte(lookup["struct"])...)
		case curclose:
			init = append(init, c)
		case dquote:
			// read prop
			prop, indexOut := readProp(jsonText, i+1)
			// append prop
			init = append(init, '\t')
			init = append(init, prop...)
			// set counter to continue after the prop
			i = indexOut

		case colon:
			// append colon
			init = append(init, wspace)
			// read the value
			valueType, indexOut := getValueType(jsonText, i+1)
			// set counter to continue after the value
			i = indexOut
			// append the read value and newline
			init = append(init, valueType...)
			init = append(init, byte('\n'))
		case comma:
		default:
			continue
		}
	}
	return init
}

func readProp(jsonText []byte, indexIn int) (string, int) {
	var buf []byte
	i := indexIn
	for ; i < len(jsonText); i++ {
		c := jsonText[i]
		if c == '"' {
			break
		}
		buf = append(buf, c)
	}
	return string(buf), i
}

func getValueType(jsonText []byte, indexIn int) (string, int) {
	restring := regexp.MustCompile(`\".*\"`)
	refloat := regexp.MustCompile(`^\s*-?([1-9]\d*\.\d+|0\.\d+)\s*$`)
	var buf []byte
	i := indexIn
	for ; i < len(jsonText); i++ {
		c := jsonText[i]
		if c == comma {
			break
		}
		if c == curclose {
			i--
			break
		}
		buf = append(buf, c)
	}

	if restring.Match(buf) {
		return "string", i
	}
	if refloat.Match(buf) {
		return "float64", i
	}
	return "int", i

}

func tesT() {
}

func parseValue() {}

func main() {
	data, err := readFile("./test/test.json")
	if err != nil {
		fmt.Println(err)
	}

	fmt.Println(string(parseJSON(data)))
}
