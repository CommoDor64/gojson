package main

import (
	"fmt"
	"io/ioutil"
)

func init() {}

const (
	curopen  = 0x7B
	curclose = 0x7D
	douquote = 0x22
	eq       = 0x3D
	comma    = 0x2C
	colon    = 0x3A
)

var stack []string

func readFile(name string) ([]byte, error) {
	data, err := ioutil.ReadFile(name)
	if err != nil {
		return []byte{}, err
	}
	return data, nil
}

func parseJSON(jsonText []byte) []byte {
	init := []byte(`Type AutoGenerated `)
	isValue := false
	for i := 0; i < len(jsonText); i++ {
		c := jsonText[i]
		switch c {
		case curopen:
			init = append(init, []byte("struct {\n")...)
		case curclose:
			init = append(init, c)
		case douquote:
			prop, indexOut := readProp(jsonText, i+1, isValue)
			init = append(init, prop...)
			if isValue {
				init = append(init, byte('\n'))
			}
			i = indexOut

		case colon:
			isValue = !isValue
			init = append(init, c)
		case comma:
			isValue = !isValue
		default:
			continue
		}
	}
	return init
}

func readProp(jsonText []byte, indexIn int, isValue bool) (string, int) {
	buf := []byte{}
	if isValue {
		buf = []byte{byte('"')}
	}
	i := indexIn
	for ; i < len(jsonText); i++ {
		c := jsonText[i]
		if c == '"' {
			break
		}
		buf = append(buf, c)
	}
	if isValue {
		buf = append(buf, byte('"'))
	}
	return string(buf), i
}

func tesT() {
}

func parseValue() {}

func main() {
	data, err := readFile("./test/test.json")
	if err != nil {
		fmt.Println(err)
	}

	fmt.Println(string(parseJSON(data)))
}
